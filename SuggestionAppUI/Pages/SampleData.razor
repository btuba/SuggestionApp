@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primay" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primay" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Buse",
                LastName = "Tuba",
                EmailAddress = "buse@tuba.com",
                DisplayName = "Setu",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-1223");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");
        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "Our first suggestion",
                Description = "This is a suggestion created by the sample data generation method."
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Our second suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                Status =statuses[0],
                OwnerNotes ="Thia is the note for the status."

            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Our third suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                Status =statuses[1],
                OwnerNotes ="Thia is the note for the status."

            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Our fourth suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                Status =statuses[2],
                UserVotes = votes,
                OwnerNotes ="Thia is the note for the status."

            };
        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Our fifth suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                Status =statuses[3],
                UserVotes = votes,
                OwnerNotes ="Thia is the note for the status."
                
            };
        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel category = new()
            {
                Name = "Courses",
                Description = "Full paid courses."
            };
        await categoryData.CreateCategory(category);

        category = new()
            {
                Name = "In-Depth Tutorial",
                Description = "A deep-dive video on how to use a topic."
            };
        await categoryData.CreateCategory(category);

        category = new()
            {
                Name = "10-Minute Training",
                Description = "A quick \"How do I use this?\" video."
            };
        await categoryData.CreateCategory(category);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }
        StatusModel status = new()
            {
                Name = "Completed",
                Description = "The suggestion was accepted and corresponding."
            };
        await statusData.CreateStatus(status);
        status = new()
            {
                Name = "Watching",
                Description = "The suggestion was accepted and corresponding."
            };

        await statusData.CreateStatus(status);
        status = new()
            {
                Name = "Upcoming",
                Description = "The suggestion was accepted and corresponding."
            };
        await statusData.CreateStatus(status);
        statusesCreated = true;
    }
}